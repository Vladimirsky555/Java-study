import java.util.*;

/*
HashMap хранит свои объекты на основе хэша.
Данные добавляются в table. Сначала проверка на хеш, если этого
хеша нет, то добавляется новый Node.
Разброс хешкода максимальный, чтобы не повторяться
Хешкод - интовое значение от 0 до 4 млрд. При повторении, мы в этом массиве новые
элементы складываются в Next
Для доступа, если по одному хешу несклоько элементов, используется метод equals.
Поэтому мы переопределяем два метода hashcode и equals.

HashTable - то же, что и HashMap, но методы синхронизированы (многопоточность)
LinkedHashMap - упорядоченный Map. Гарантируется порядок, в котором были добавлены элементы.

TreeMap - сортированный Map. Метод cортировки Red Black 3.

 */

public class Main {
    public static void main(String args) {
        Map map = new HashMap();//неупорядоченный список
        Map map2 = new Hashtable();//Синхронизированные методы (многопоточность), неупорядоченный список
        Map map3 = new LinkedHashMap();//Упорядоченные элементы (двусвязный список)
        Map map4 = new TreeMap();//Сортировка

        map3.put("1", "one");
        map3.put("3", "three");
        map3.put("2", "two");

        System.out.println(map3.get("2"));

        //Пробегаемся по коллекции
        //Нет гарантии в какой последовательности будет вывод
        //Вывод зависит от хэша
        Set set = map3.entrySet();
        for(Object o : set){
            System.out.println(o);
        }
    }
}
